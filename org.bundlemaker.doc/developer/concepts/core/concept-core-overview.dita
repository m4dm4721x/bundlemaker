<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="conceptId">
 <title>Bundlemaker Core</title>
 <shortdesc>The Bundlemaker core bundle defines the core concepts and abstractions that are used to
  analyse, transform and (re-)export a java application. It provides an API that allows you to
   <i>programmatically</i> parse and transform java applications. I also provides several extension
  points [TBD] that can be used to defined custom parsers, transformers or exporters.</shortdesc>
 <conbody>
  <section><title>Core concepts</title>
   <p>To get an understanding of how to restructure an application using Bundlemaker, it is crucial
    to understand some underlying concepts first (we will cover all these concepts in detail in the
    following sections): <ul>
     <li><b>Bundlemaker project:</b>
      <indexterm>Bundlemaker project</indexterm>To analyse and transform a java-based system you
      have to create a Bundlemaker project. A Bundlemaker project contains a project description
       <indexterm>Bundlemaker project description</indexterm> that defines the content of the
      application that should be analysed. It also has a defined state model that determines which
      actions can be executed.</li>
     <li><b>Project description:</b>
      <indexterm>Bundlemaker project description</indexterm> The project description that defines
      the content of the application that should be analysed. Unlike many other open source
      dependency analysis tools Bundlemaker is able to parse byte code as well as java source code.
      So the project description can contain binary content (e.g. JAR archives) and source content
      (e.g. ZIP files that contain java source files).</li>
     <li><b>Content parsers:</b>
      <indexterm>Content parsers</indexterm> Bundlemaker implements (more precise: utilises) several
      parsers to extract dependency information from the project content. It ships with a JDT based
      java source parser and an ASM based byte code parser. Additionally several bundlor based
      parser ar included, e.g. for extracting referenced types from JSPs or spring context
      definition files [TBD].</li>
     <li><b>Transformations:</b>
      <indexterm>Transformations</indexterm>You can restructure a given application by applying one
      or more transformations to it. A transformation changes the module structure of the system by
      creating new or deleting old modules, moving resources beetween modules and so on.</li>
     <li><b>Exporters:</b>
      <indexterm>Exporters</indexterm>After restructuring the application, you can export them using
      one or more exporters.</li>
    </ul>
   </p>
  </section>
 </conbody>
</concept>
