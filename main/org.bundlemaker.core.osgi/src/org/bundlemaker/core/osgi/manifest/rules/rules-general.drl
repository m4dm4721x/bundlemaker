package org.bundlemaker.core.osgi.manifest.rules

import org.bundlemaker.core.modules.IResourceModule;
import com.springsource.util.osgi.manifest.BundleManifest;
import org.bundlemaker.core.osgi.internal.manifest.IdentifiableBundleManifest;
import org.osgi.framework.Version;
import org.bundlemaker.core.osgi.utils.ManifestUtils;
import org.bundlemaker.core.osgi.exporter.ManifestConstants;
import org.bundlemaker.core.modules.IModule;
import org.bundlemaker.core.osgi.internal.manifest.ReferencesCache;
import org.bundlemaker.core.osgi.manifest.IManifestPreferences;

// the global definitions
global IResourceModule _resourceModule;
global IModularizedSystem _modularizedSystem;
global IManifestPreferences _manifestPreferences;
global ReferencesCache _referencesCache;
global IdentifiableBundleManifest _bundleManifest;
global IdentifiableBundleManifest _originalManifest;
global IdentifiableBundleManifest _manifestTemplate;

rule "Bundle-ManifestVersion, Bundle-SymbolicName, Bundle-Name"
when
   eval( true )
then
	// set the 'Bundle-ManifestVersion'
    _bundleManifest.setBundleManifestVersion(2);

    // set the 'Bundle-SymbolicName'
    _bundleManifest.getBundleSymbolicName().setSymbolicName(_resourceModule.getModuleIdentifier().getName());

	// set the 'Bundle-Name'
    _bundleManifest.setBundleName(_resourceModule.getModuleIdentifier().getName());
end

rule "Bundle-Version"
when
    eval( ManifestUtils.isValidOSGiVersion(_resourceModule.getModuleIdentifier().getVersion()) )
then
    _bundleManifest.setBundleVersion(new Version(_resourceModule.getModuleIdentifier().getVersion()));
end

rule "Default-Bundle-Version"
when
    not( eval( ManifestUtils.isValidOSGiVersion(_resourceModule.getModuleIdentifier().getVersion()) ))
then
    _bundleManifest.setBundleVersion(new Version("0.0.0"));
end

rule "Fragment-Host"
when
    eval( ManifestUtils.isFragment(_resourceModule) )
    $hostModule : IModule() from ManifestUtils.getFragmentHost(_resourceModule)
then
    _bundleManifest.getFragmentHost().setBundleSymbolicName($hostModule.getModuleIdentifier().getName());
end

rule "Eclipse-ExtensibleAPI"
when
    eval( ! ManifestUtils.isFragment(_resourceModule) )
then
    _bundleManifest.setHeader("Eclipse-ExtensibleAPI", "true");
end

rule "Copy all original manifest header that are not 'ORIGINAL_HEADERS_NOT_TO_COPY'"
when
 	$key : String() from _originalManifest.getHeaders()
 	not( eval ( ManifestConstants.ORIGINAL_HEADERS_NOT_TO_COPY.contains($key) )) 
 then
	_bundleManifest.setHeader($key, _originalManifest.getHeader($key));
end

rule "Copy all manifest template header that are not 'TEMPLATE_HEADERS_NOT_TO_COPY'"
salience -10
when
 	$key : String() from _manifestTemplate.getHeaders()
 	not( eval ( ManifestConstants.TEMPLATE_HEADERS_NOT_TO_COPY.contains($key) )) 
 then
	_bundleManifest.setHeader($key, _manifestTemplate.getHeader($key));
end