/*
* generated by Xtext
*/

package org.bundlemaker.core.transformations.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class TransformationDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class TransformationModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransformationModel");
		private final Assignment cTransformationsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTransformationsTransformationParserRuleCall_0 = (RuleCall)cTransformationsAssignment.eContents().get(0);
		
		//TransformationModel:
		//	transformations+=Transformation*;
		public ParserRule getRule() { return rule; }

		//transformations+=Transformation*
		public Assignment getTransformationsAssignment() { return cTransformationsAssignment; }

		//Transformation
		public RuleCall getTransformationsTransformationParserRuleCall_0() { return cTransformationsTransformationParserRuleCall_0; }
	}

	public class TransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transformation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRemoveFromParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEmbedIntoParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCreateModuleParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Transformation:
		//	RemoveFrom | EmbedInto | CreateModule;
		public ParserRule getRule() { return rule; }

		//RemoveFrom | EmbedInto | CreateModule
		public Alternatives getAlternatives() { return cAlternatives; }

		//RemoveFrom
		public RuleCall getRemoveFromParserRuleCall_0() { return cRemoveFromParserRuleCall_0; }

		//EmbedInto
		public RuleCall getEmbedIntoParserRuleCall_1() { return cEmbedIntoParserRuleCall_1; }

		//CreateModule
		public RuleCall getCreateModuleParserRuleCall_2() { return cCreateModuleParserRuleCall_2; }
	}

	public class RemoveFromElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RemoveFrom");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRemoveFromKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cResourceSetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cResourceSetResourceSetParserRuleCall_1_0 = (RuleCall)cResourceSetAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//RemoveFrom:
		//	"remove-from" resourceSet=ResourceSet ";";
		public ParserRule getRule() { return rule; }

		//"remove-from" resourceSet=ResourceSet ";"
		public Group getGroup() { return cGroup; }

		//"remove-from"
		public Keyword getRemoveFromKeyword_0() { return cRemoveFromKeyword_0; }

		//resourceSet=ResourceSet
		public Assignment getResourceSetAssignment_1() { return cResourceSetAssignment_1; }

		//ResourceSet
		public RuleCall getResourceSetResourceSetParserRuleCall_1_0() { return cResourceSetResourceSetParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class EmbedIntoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EmbedInto");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEmbedIntoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHostModuleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHostModuleModuleIdentifierParserRuleCall_1_0 = (RuleCall)cHostModuleAssignment_1.eContents().get(0);
		private final Keyword cModulesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cModulesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cModulesModuleIdentifierParserRuleCall_3_0 = (RuleCall)cModulesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cModulesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cModulesModuleIdentifierParserRuleCall_4_1_0 = (RuleCall)cModulesAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//EmbedInto:
		//	"embed-into" hostModule=ModuleIdentifier "modules" modules+=ModuleIdentifier ("," modules+=ModuleIdentifier)* ";";
		public ParserRule getRule() { return rule; }

		//"embed-into" hostModule=ModuleIdentifier "modules" modules+=ModuleIdentifier ("," modules+=ModuleIdentifier)* ";"
		public Group getGroup() { return cGroup; }

		//"embed-into"
		public Keyword getEmbedIntoKeyword_0() { return cEmbedIntoKeyword_0; }

		//hostModule=ModuleIdentifier
		public Assignment getHostModuleAssignment_1() { return cHostModuleAssignment_1; }

		//ModuleIdentifier
		public RuleCall getHostModuleModuleIdentifierParserRuleCall_1_0() { return cHostModuleModuleIdentifierParserRuleCall_1_0; }

		//"modules"
		public Keyword getModulesKeyword_2() { return cModulesKeyword_2; }

		//modules+=ModuleIdentifier
		public Assignment getModulesAssignment_3() { return cModulesAssignment_3; }

		//ModuleIdentifier
		public RuleCall getModulesModuleIdentifierParserRuleCall_3_0() { return cModulesModuleIdentifierParserRuleCall_3_0; }

		//("," modules+=ModuleIdentifier)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//modules+=ModuleIdentifier
		public Assignment getModulesAssignment_4_1() { return cModulesAssignment_4_1; }

		//ModuleIdentifier
		public RuleCall getModulesModuleIdentifierParserRuleCall_4_1_0() { return cModulesModuleIdentifierParserRuleCall_4_1_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class CreateModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CreateModule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCreateModuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cModuleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModuleModuleIdentifierParserRuleCall_1_0 = (RuleCall)cModuleAssignment_1.eContents().get(0);
		private final Assignment cFromAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFromFromParserRuleCall_2_0 = (RuleCall)cFromAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CreateModule:
		//	"create-module" module=ModuleIdentifier from+=From* ";";
		public ParserRule getRule() { return rule; }

		//"create-module" module=ModuleIdentifier from+=From* ";"
		public Group getGroup() { return cGroup; }

		//"create-module"
		public Keyword getCreateModuleKeyword_0() { return cCreateModuleKeyword_0; }

		//module=ModuleIdentifier
		public Assignment getModuleAssignment_1() { return cModuleAssignment_1; }

		//ModuleIdentifier
		public RuleCall getModuleModuleIdentifierParserRuleCall_1_0() { return cModuleModuleIdentifierParserRuleCall_1_0; }

		//from+=From*
		public Assignment getFromAssignment_2() { return cFromAssignment_2; }

		//From
		public RuleCall getFromFromParserRuleCall_2_0() { return cFromFromParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class FromElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "From");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFromKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cResourceSetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cResourceSetResourceSetParserRuleCall_1_0 = (RuleCall)cResourceSetAssignment_1.eContents().get(0);
		
		//From:
		//	"from" resourceSet=ResourceSet;
		public ParserRule getRule() { return rule; }

		//"from" resourceSet=ResourceSet
		public Group getGroup() { return cGroup; }

		//"from"
		public Keyword getFromKeyword_0() { return cFromKeyword_0; }

		//resourceSet=ResourceSet
		public Assignment getResourceSetAssignment_1() { return cResourceSetAssignment_1; }

		//ResourceSet
		public RuleCall getResourceSetResourceSetParserRuleCall_1_0() { return cResourceSetResourceSetParserRuleCall_1_0; }
	}

	public class ResourceSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResourceSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModuleIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModuleIdentifierModuleIdentifierParserRuleCall_0_0 = (RuleCall)cModuleIdentifierAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cIncludeKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIncludeResourcesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIncludeResourcesResourceListParserRuleCall_1_1_0 = (RuleCall)cIncludeResourcesAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExcludeKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExcludeResourcesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExcludeResourcesResourceListParserRuleCall_2_1_0 = (RuleCall)cExcludeResourcesAssignment_2_1.eContents().get(0);
		
		//ResourceSet:
		//	moduleIdentifier=ModuleIdentifier ("include" includeResources=ResourceList)? ("exclude"
		//	excludeResources=ResourceList)?;
		public ParserRule getRule() { return rule; }

		//moduleIdentifier=ModuleIdentifier ("include" includeResources=ResourceList)? ("exclude" excludeResources=ResourceList)?
		public Group getGroup() { return cGroup; }

		//moduleIdentifier=ModuleIdentifier
		public Assignment getModuleIdentifierAssignment_0() { return cModuleIdentifierAssignment_0; }

		//ModuleIdentifier
		public RuleCall getModuleIdentifierModuleIdentifierParserRuleCall_0_0() { return cModuleIdentifierModuleIdentifierParserRuleCall_0_0; }

		//("include" includeResources=ResourceList)?
		public Group getGroup_1() { return cGroup_1; }

		//"include"
		public Keyword getIncludeKeyword_1_0() { return cIncludeKeyword_1_0; }

		//includeResources=ResourceList
		public Assignment getIncludeResourcesAssignment_1_1() { return cIncludeResourcesAssignment_1_1; }

		//ResourceList
		public RuleCall getIncludeResourcesResourceListParserRuleCall_1_1_0() { return cIncludeResourcesResourceListParserRuleCall_1_1_0; }

		//("exclude" excludeResources=ResourceList)?
		public Group getGroup_2() { return cGroup_2; }

		//"exclude"
		public Keyword getExcludeKeyword_2_0() { return cExcludeKeyword_2_0; }

		//excludeResources=ResourceList
		public Assignment getExcludeResourcesAssignment_2_1() { return cExcludeResourcesAssignment_2_1; }

		//ResourceList
		public RuleCall getExcludeResourcesResourceListParserRuleCall_2_1_0() { return cExcludeResourcesResourceListParserRuleCall_2_1_0; }
	}

	public class MODULEIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MODULEID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBMIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cBMIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//MODULEID returns ecore::EString:
		//	BMID ("." BMID)*;
		public ParserRule getRule() { return rule; }

		//BMID ("." BMID)*
		public Group getGroup() { return cGroup; }

		//BMID
		public RuleCall getBMIDTerminalRuleCall_0() { return cBMIDTerminalRuleCall_0; }

		//("." BMID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//BMID
		public RuleCall getBMIDTerminalRuleCall_1_1() { return cBMIDTerminalRuleCall_1_1; }
	}

	public class ModuleIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModuleIdentifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModulenameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModulenameMODULEIDParserRuleCall_0_0 = (RuleCall)cModulenameAssignment_0.eContents().get(0);
		private final Assignment cVersionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVersionSTRINGTerminalRuleCall_1_0 = (RuleCall)cVersionAssignment_1.eContents().get(0);
		
		//ModuleIdentifier:
		//	modulename=MODULEID version=STRING;
		public ParserRule getRule() { return rule; }

		//modulename=MODULEID version=STRING
		public Group getGroup() { return cGroup; }

		//modulename=MODULEID
		public Assignment getModulenameAssignment_0() { return cModulenameAssignment_0; }

		//MODULEID
		public RuleCall getModulenameMODULEIDParserRuleCall_0_0() { return cModulenameMODULEIDParserRuleCall_0_0; }

		//version=STRING
		public Assignment getVersionAssignment_1() { return cVersionAssignment_1; }

		//STRING
		public RuleCall getVersionSTRINGTerminalRuleCall_1_0() { return cVersionSTRINGTerminalRuleCall_1_0; }
	}

	public class ResourceListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResourceList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cResourcesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cResourcesSTRINGTerminalRuleCall_0_0 = (RuleCall)cResourcesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cResourcesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cResourcesSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cResourcesAssignment_1_1.eContents().get(0);
		
		//ResourceList:
		//	resources+=STRING ("," resources+=STRING)*;
		public ParserRule getRule() { return rule; }

		//resources+=STRING ("," resources+=STRING)*
		public Group getGroup() { return cGroup; }

		//resources+=STRING
		public Assignment getResourcesAssignment_0() { return cResourcesAssignment_0; }

		//STRING
		public RuleCall getResourcesSTRINGTerminalRuleCall_0_0() { return cResourcesSTRINGTerminalRuleCall_0_0; }

		//("," resources+=STRING)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//resources+=STRING
		public Assignment getResourcesAssignment_1_1() { return cResourcesAssignment_1_1; }

		//STRING
		public RuleCall getResourcesSTRINGTerminalRuleCall_1_1_0() { return cResourcesSTRINGTerminalRuleCall_1_1_0; }
	}
	
	
	private TransformationModelElements pTransformationModel;
	private TransformationElements pTransformation;
	private RemoveFromElements pRemoveFrom;
	private EmbedIntoElements pEmbedInto;
	private CreateModuleElements pCreateModule;
	private FromElements pFrom;
	private ResourceSetElements pResourceSet;
	private TerminalRule tBMID;
	private MODULEIDElements pMODULEID;
	private ModuleIdentifierElements pModuleIdentifier;
	private ResourceListElements pResourceList;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public TransformationDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//TransformationModel:
	//	transformations+=Transformation*;
	public TransformationModelElements getTransformationModelAccess() {
		return (pTransformationModel != null) ? pTransformationModel : (pTransformationModel = new TransformationModelElements());
	}
	
	public ParserRule getTransformationModelRule() {
		return getTransformationModelAccess().getRule();
	}

	//Transformation:
	//	RemoveFrom | EmbedInto | CreateModule;
	public TransformationElements getTransformationAccess() {
		return (pTransformation != null) ? pTransformation : (pTransformation = new TransformationElements());
	}
	
	public ParserRule getTransformationRule() {
		return getTransformationAccess().getRule();
	}

	//RemoveFrom:
	//	"remove-from" resourceSet=ResourceSet ";";
	public RemoveFromElements getRemoveFromAccess() {
		return (pRemoveFrom != null) ? pRemoveFrom : (pRemoveFrom = new RemoveFromElements());
	}
	
	public ParserRule getRemoveFromRule() {
		return getRemoveFromAccess().getRule();
	}

	//EmbedInto:
	//	"embed-into" hostModule=ModuleIdentifier "modules" modules+=ModuleIdentifier ("," modules+=ModuleIdentifier)* ";";
	public EmbedIntoElements getEmbedIntoAccess() {
		return (pEmbedInto != null) ? pEmbedInto : (pEmbedInto = new EmbedIntoElements());
	}
	
	public ParserRule getEmbedIntoRule() {
		return getEmbedIntoAccess().getRule();
	}

	//CreateModule:
	//	"create-module" module=ModuleIdentifier from+=From* ";";
	public CreateModuleElements getCreateModuleAccess() {
		return (pCreateModule != null) ? pCreateModule : (pCreateModule = new CreateModuleElements());
	}
	
	public ParserRule getCreateModuleRule() {
		return getCreateModuleAccess().getRule();
	}

	//From:
	//	"from" resourceSet=ResourceSet;
	public FromElements getFromAccess() {
		return (pFrom != null) ? pFrom : (pFrom = new FromElements());
	}
	
	public ParserRule getFromRule() {
		return getFromAccess().getRule();
	}

	//ResourceSet:
	//	moduleIdentifier=ModuleIdentifier ("include" includeResources=ResourceList)? ("exclude"
	//	excludeResources=ResourceList)?;
	public ResourceSetElements getResourceSetAccess() {
		return (pResourceSet != null) ? pResourceSet : (pResourceSet = new ResourceSetElements());
	}
	
	public ParserRule getResourceSetRule() {
		return getResourceSetAccess().getRule();
	}

	//terminal BMID:
	//	"^"? ("a".."z" | "A".."Z" | "_" | "-") ("a".."z" | "A".."Z" | "_" | "-" | "0".."9")*;
	public TerminalRule getBMIDRule() {
		return (tBMID != null) ? tBMID : (tBMID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BMID"));
	} 

	//MODULEID returns ecore::EString:
	//	BMID ("." BMID)*;
	public MODULEIDElements getMODULEIDAccess() {
		return (pMODULEID != null) ? pMODULEID : (pMODULEID = new MODULEIDElements());
	}
	
	public ParserRule getMODULEIDRule() {
		return getMODULEIDAccess().getRule();
	}

	//ModuleIdentifier:
	//	modulename=MODULEID version=STRING;
	public ModuleIdentifierElements getModuleIdentifierAccess() {
		return (pModuleIdentifier != null) ? pModuleIdentifier : (pModuleIdentifier = new ModuleIdentifierElements());
	}
	
	public ParserRule getModuleIdentifierRule() {
		return getModuleIdentifierAccess().getRule();
	}

	//ResourceList:
	//	resources+=STRING ("," resources+=STRING)*;
	public ResourceListElements getResourceListAccess() {
		return (pResourceList != null) ? pResourceList : (pResourceList = new ResourceListElements());
	}
	
	public ParserRule getResourceListRule() {
		return getResourceListAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
