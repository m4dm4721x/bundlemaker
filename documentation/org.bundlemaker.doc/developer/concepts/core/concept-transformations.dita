<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright (c) 2011 Gerd Wuetherich (gerd@gerd-wuetherich.de).
  All rights reserved. This program and the accompanying materials
  are made available under the terms of the Eclipse Public License v1.0
  which accompanies this distribution, and is available at
  http://www.eclipse.org/legal/epl-v10.html
  
  Contributors:
      Gerd Wuetherich (gerd@gerd-wuetherich.de) - initial API and implementation
-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="conceptId">
 <title>Transformations</title>
 <shortdesc/>
 <conbody>
  <p>Once a system has been parsed, it can be transformed in several (new) modules. To apply
   transformation to a system, you first have to fetch an instance of type
    <codeph>org.bundlemaker.core.modules.IModularizedSystem</codeph>. This is done by calling
   "IBundleMakerProject.createModularizedSystemWorkingCopy(String name)" (or
   "IBundleMakerProject.getModularizedSystemWorkingCopy(String name)" if you already have created
   the required instance). To defined your transformations you have to add instances of type
   "org.bundlemaker.core.transformation.ITransformation" to the IModularizedSystem. ITransformation
   is a simple interface that gives you access to the "IModifiableModularizedSystem":
   <codeblock>
   public interface ITransformation {
   public void apply(IModifiableModularizedSystem modularizedSystem);
   }
   </codeblock>
   IMPORTANT: Each IModifiableModularizedSystem has *always* a default transformation that maps each
   content entry in th eproject description it's own module. , and one possible transformation is
   the "org.bundlemaker.core.transformation.ResourceSetBasedTransformation" that is implemented in
   project "org.bundlemaker.core". In principle you can define any transformation type you want, but
   mostly you will work with the ResourceSetBasedTransformation. Here is an example from the spring
   integration test:
   <codeblock>
   // create the new ResourceSetBasedTransformation...
   ResourceSetBasedTransformation transformation = new ResourceSetBasedTransformation();
   
   // ... and add it to the transformation list
   modularizedSystem.getTransformations().add(transformation);
   
   // we want to split the "Spring" module 
   IModuleIdentifier fromIdentifier = new ModuleIdentifier("Spring", "2.5.6");
   
   // create the pattern based resource set
   // this defnition takes all resources (!) from the module ["Spring", "2.5.6"] that match
   // the given pattern and puts it to a new module ["spring-core", "2.5.6"]
   transformation.addModuleDefinition("spring-core", "2.5.6").addResourceSet(
   fromIdentifier,
   new String[] { "org/springframework/core/**", "org/springframework/metadata/**", 
   "org/springframework/util/**", "org/springframework/asm/**" }, null);
  </codeblock>
  </p>
  <image href="./images/bundlemaker-transformations.png" scale="50"/>
 </conbody>
</concept>
