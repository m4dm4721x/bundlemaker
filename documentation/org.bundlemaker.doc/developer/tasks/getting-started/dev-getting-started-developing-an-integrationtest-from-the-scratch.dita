<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/task.dtd">
<task id="taskId">
    <title>Developing an integration test from the scratch</title>
    <shortdesc>After executing the pre-built spring integration test, it is now time to develop an
        integration test from the scratch. This tuorial gives you a complete walkthrough of how to
        programmatically analyse and transform a system (in this case the spring framework). The
        integration test will be implemented a a JUnit test.</shortdesc>
    <taskbody>
        <prereq>Please make sure that your workspace is correctly set up and contains the latest
            sources from the git-hub repository.</prereq>
        <steps>
            <step>
                <cmd>Create a new plug-in project</cmd>
                <info>
                    <p>Before you start with the development of the test case, you have to create
                        the containing plug-project. You can easily create a new PDE plug-project
                        using the 'Plug-In Project Wizard' of the PDE. Please name the new project
                        'spring-test'. You don't have to create an activator for this project, so
                        you can uncheck the associated check box.</p>
                    <p>After creating the project your workspace should look like shown in the
                        figure below.</p>
                    <image href="./images/dev-getting-started-DIFS-new-project.png" scale="40"/>
                </info>
            </step>
            <step>
                <cmd>Download and unzip the spring example</cmd>
                <info>
                    <p>As the next step please download the spring classes, sources and required
                        libaries <xref
                            href="http://www.bundlemaker.org/sites/bundlemaker.org/files/bundlemaker-spring-example.zip"
                            >here</xref>. The archive contains a pre-packaged spring framework with
                        all required dependencies. Create a new folder in the 'spring-test' project
                        named 'spring' and unzip the content of the archive into this folder.</p>
                    <image href="./images/dev-getting-started-DIFS-prepare-spring.png" scale="100"/>
                </info>
            </step>
            <step>
                <cmd>Add required plug-ins</cmd>
                <info>
                    <p>You can now add all required bundles to the plug-in project manifest. Please
                        add the following bundles:<ul>
                            <li>org.bundlemaker.core</li>
                            <li>org.bundlemaker.core.osgi</li>
                            <li>org.eclipse.core.runtime</li>
                            <li>org.eclipse.core.resources</li>
                            <li>org.junit</li>
                            <li>org.eclipse.jdt.launching</li>
                        </ul>
                    </p>
                    <p>After adding the dependencies your manifest should look like shown in the
                        figure below.</p>
                    <image href="./images/dev-getting-started-DIFS-adding-dependencies.png"
                        scale="60"/>
                </info>
            </step>
            <step>
                <cmd>Create test class</cmd>
                <info>
                    <p>Create a new (test) class in the package <codeph>springtest</codeph> named
                            <codeph>SpringTest</codeph>. </p>
                    <image href="./images/dev-getting-started-DIFS-create-SpringTest.png"/>
                    <p>Open the java editor and add a (yet empty) test method called
                            <codeph>test</codeph>. Please assure that the method is annotated with
                        the <codeph>@Test</codeph> annotation.</p>
                    <codeblock>
  package springtest;

  import org.junit.Test;

  public class SpringTest {

    @Test
    public void test() {
    
    }
  }
</codeblock>
                </info>
            </step>
            <step>
                <cmd>Programmatically creating the bundlemaker project</cmd>
                <info>
                    <p>Once the test class is created, we can start to develop the integration test.
                        The first thing we have to do is to programmtically create a bundlemaker
                        project. Whenever you want to analyse and transform a system, you have to do
                        it in the context of a bundlemaker project. Technically a bundlemaker
                        project is a simple eclipse project that has the
                            <codeph>org.bundlemaker.core.bundlemakernature</codeph> nature. You can
                        use the following code to create a bundlemaker project called
                            <i>'spring-example'</i> within the target workspace.</p>
                    <codeblock>
  @Test
  public void test() {

    // (1) delete project if exists
    EclipseProjectUtils.deleteProjectIfExists("spring-example");

    // (2) create simple project
    IProject simpleProject = BundleMakerCore
      .getOrCreateSimpleProjectWithBundleMakerNature("spring-example");

    // (3) get the BundleMaker project
    IBundleMakerProject bundleMakerProject = BundleMakerCore
      .getBundleMakerProject(simpleProject, null);

    ...

  }
                    </codeblock>
                    <p>Explanation:</p>
                    <ul>
                        <li><b>(1)</b> You can use the helper class
                                <codeph>EclipseProjectUtils</codeph> that is contained in the bundle
                                <codeph>org.bundlemaker.core</codeph> to delete an eclipse project
                            with the specified name (if one exits).</li>
                        <li><b>(2)</b> You can also use this class to create (or simply get) a
                            project with the specified name. The method
                                <codeph>EclipseProjectUtils.getOrCreateSimpleProjectWithBundleMakerNature(String)</codeph>
                            returns an existing instance (if one exists) or creates a new one. </li>
                        <li><b>(3)</b> To fetch the associated <codeph>IBundleMakerProject</codeph>
                            instance, you can call
                                <codeph>BundleMakerCore.getBundleMakerProject(IProject project,
                                IProgressMonitor progressMonitor)</codeph></li>
                    </ul>
                </info>
            </step>
            <step>
                <cmd>Setting the project description</cmd>
                <info>
                    <p> Now you have the IBundleMakerProject instance, you have to add some content
                        to the project. For reason of clearity we will do this in an explicit method
                        named <codeph>setProjectDescription(IBundleMakerProject)</codeph>.</p>
                    <p>Whenever you want to add content (source/binary directories or archives) to
                        the project description, you have to add them either as <i>resources
                            content</i> or as <i>type content</i>. Resource content contains the
                        classes and source that should be analyzed and transformed, while type
                        content contains classes that are only needed to fullfill dependencies that
                        resource content have. Type content will not be parsed, and you can not
                        transform type content in any way.</p>
                    <codeblock>           
  @Test
  public void test() {
  
    ...
	
    // (4) set the project description
    setProjectDescription(bundleMakerProject);

    ...
  }

  /**
   * Helper method that creates a bundlemaker project description.
   *
   * @param bundleMakerProject 
   * @throws CoreException
   */            
  private void setProjectDescription(IBundleMakerProject bundleMakerProject)
      throws CoreException {

    // (4-1) get the project description instance
    IBundleMakerProjectDescription projectDescription = bundleMakerProject
      .getProjectDescription();

    // (4-2) remove any content
    projectDescription.clear();

    // (4-3) set the name of the associated JRE
    projectDescription.setJre(
      JavaRuntime.getDefaultVMInstall().getName());

    // (4-4) add a content entry for the spring 
    // framework that contains sources and binary files 
    File classesZip = new File(System.getProperty("user.dir"),
      "spring/classes.zip");

    File sourceDirectory = new File(System.getProperty("user.dir"),
      "spring/source.zip");

    projectDescription
      .addResourceContent("Spring", "2.5.6",
        classesZip.getAbsolutePath(),
         sourceDirectory.getAbsolutePath());

    // (4-5) add content entries for all archive
    // files in the 'spring/libs' folder
    File libsDir = new File(System.getProperty("user.dir"), 
      "spring/libs");
    
    for (File externalJar : libsDir.listFiles()) {
    projectDescription
      .addResourceContent(externalJar.getAbsolutePath());
    }

    // (4-6) finally we have to save the project description
    projectDescription.save();
  }
                    </codeblock>
                    <p>Explanation:</p>
                    <ul>
                        <li><b>(4)</b> Delegate the work to the helper method.</li>
                        <li><b>(4-1)</b> To fetch the
                                <codeph>IBundleMakerProjectDescription</codeph> instance simply call
                            the method <codeph>getProjectDescription()</codeph> on the bundlemaker
                            project.</li>
                        <li><b>(4-2)</b> As we want to create a new project description, we have to
                            call <codeph>projectDescription.clear()</codeph> to remove any content
                            entries that may have been added before. After calling this method the
                            project description doesn't contain any entries anymore.</li>
                        <li><b>(4-3)</b> Within the parsing process bundlemaker maker has to refer
                            to an underlying JRE to resolve the contained types. Therefore we have
                            to add the name of the JRE that should be used. [TBD]</li>
                        <li><b>(4-4)</b> For the spring project we add the
                                <codeph>classes.zip</codeph> and the <codeph>source.zip</codeph> as
                            one resource content entry with the name "Spring" and the version
                            "2.5.6".</li>
                        <li><b>(4-5) We also add all the spring jars as resource content to the
                                project description. The reason why we add them as resource content
                                (instead of type content) is that we want to transform all the
                                libraries to valid OSGi bundles.</b>
                        </li>
                        <li><b>(4-6)</b> When the project description is set up, it must be saved.
                        </li>
                    </ul>
                </info>
            </step>
            <step>
                <cmd>Parsing and opening the bundlemaker project</cmd>
                <info>
                    <p/>
                    <codeblock>
  @Test
  public void test() {

    ...
  
    // (5) initialize the project
    bundleMakerProject.initialize(new ProgressMonitor());

    // (6) parse and dump the problems
    List&lt;? extends IProblem&gt; problems = bundleMakerProject.parse(
      new ProgressMonitor(), true);

    BundleMakerProjectUtils.dumpProblems(problems);

    // (7) open the project
    bundleMakerProject.open(new ProgressMonitor());

    ...
  }
                    </codeblock>
                </info>
            </step>
            <step>
                <cmd>Applying transformations</cmd>
                <info>
                    <codeblock>
  // (8) get the default modularized system
  IModularizedSystem modularizedSystem = bundleMakerProject
		.getModularizedSystemWorkingCopy(bundleMakerProject
				.getProject().getName());

  // (9)
  modularizedSystem.applyTransformations();
                    </codeblock>
                </info>
            </step>
            <step>
                <cmd>Exporting the modularized system</cmd>
                <info>
                    <codeblock>
  // (10) create the destination directory
  File destination = new File(System.getProperty("user.dir"), 
    "destination");
  destination.mkdirs();

  // (11) create the exporter context
  DefaultModuleExporterContext exporterContext = 
    new DefaultModuleExporterContext(bundleMakerProject, 
      destination, modularizedSystem);

  // (12) export plug-in projects
  new ModularizedSystemExporterAdapter(new PdePluginProjectModuleExporter()).export(
    modularizedSystem, exporterContext);

  // (13) export target platform project
  TargetPlatformProjectExporter targetPlatformProjectExporter = new TargetPlatformProjectExporter();
  targetPlatformProjectExporter.export(modularizedSystem, exporterContext);                        
                    </codeblock>
                </info>
            </step>
            <step>
                <cmd>Creating a launch configuration</cmd>
                <info>
                    <ul>
                        <li>org.bundlemaker.core</li>
                    </ul>
                </info>
            </step>
        </steps>
        <result>
            <p>Here is the complete test class:</p>
            <codeblock>
package springtest;

import java.io.File;
import java.util.List;

import org.bundlemaker.core.BundleMakerCore;
import org.bundlemaker.core.IBundleMakerProject;
import org.bundlemaker.core.IProblem;
import org.bundlemaker.core.exporter.DefaultModuleExporterContext;
import org.bundlemaker.core.exporter.ModularizedSystemExporterAdapter;
import org.bundlemaker.core.modules.IModularizedSystem;
import org.bundlemaker.core.osgi.pde.exporter.PdePluginProjectModuleExporter;
import org.bundlemaker.core.osgi.pde.exporter.TargetPlatformProjectExporter;
import org.bundlemaker.core.projectdescription.IBundleMakerProjectDescription;
import org.bundlemaker.core.util.BundleMakerProjectUtils;
import org.bundlemaker.core.util.EclipseProjectUtils;
import org.bundlemaker.core.util.ProgressMonitor;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.jdt.launching.JavaRuntime;
import org.junit.Test;

public class SpringTest {

	@Test
	public void test() throws Exception {

    // (1) delete project if exists
    EclipseProjectUtils.deleteProjectIfExists("spring-example");

    // (2) create simple project
    IProject simpleProject = BundleMakerCore
      .getOrCreateSimpleProjectWithBundleMakerNature("spring-example");

    // (3) get the BundleMaker project
    IBundleMakerProject bundleMakerProject = BundleMakerCore
      .getBundleMakerProject(simpleProject, null);

    // (4) set the project description
    setProjectDescription(bundleMakerProject);

    // (5) initialize the project
    bundleMakerProject.initialize(new ProgressMonitor());

    // (6) parse and dump the problems
    List&lt;? extends IProblem&gt; problems = bundleMakerProject.parse(
      new ProgressMonitor(), true);

    BundleMakerProjectUtils.dumpProblems(problems);

    // (7) open the project
    bundleMakerProject.open(new ProgressMonitor());

	  // (8) get the default modularized system
	  IModularizedSystem modularizedSystem = bundleMakerProject
	    .getModularizedSystemWorkingCopy(bundleMakerProject
	        .getProject().getName());

	  // (9)
	  modularizedSystem.applyTransformations();

	  // (10) create the destination directory
	  File destination = new File(System.getProperty("user.dir"), 
	    "destination");
	  destination.mkdirs();

	  // (11) create the exporter context
	  DefaultModuleExporterContext exporterContext = 
	    new DefaultModuleExporterContext(bundleMakerProject, 
	      destination, modularizedSystem);

	  // (12) export plug-in projects
	  new ModularizedSystemExporterAdapter(new PdePluginProjectModuleExporter()).export(
	    modularizedSystem, exporterContext);

	  // (13) export target platform project
	  TargetPlatformProjectExporter targetPlatformProjectExporter = new TargetPlatformProjectExporter();
	  targetPlatformProjectExporter.export(modularizedSystem, exporterContext);   
	}

  /**
   * Helper method that creates a bundlemaker project description.
   *
   * @param bundleMakerProject 
   * @throws CoreException
   */            
  private void setProjectDescription(IBundleMakerProject bundleMakerProject)
      throws CoreException {

    // (4-1) get the project description instance
    IBundleMakerProjectDescription projectDescription = bundleMakerProject
      .getProjectDescription();

    // (4-2) remove any content
    projectDescription.clear();

    // (4-3) set the name of the associated JRE
    projectDescription.setJre(
      JavaRuntime.getDefaultVMInstall().getName());

    // (4-4) add a content entry for the spring 
    // framework that contains sources and binary files 
    File classesZip = new File(System.getProperty("user.dir"),
      "spring/classes.zip");

    File sourceDirectory = new File(System.getProperty("user.dir"),
      "spring/source.zip");

    projectDescription
      .addResourceContent("Spring", "2.5.6",
        classesZip.getAbsolutePath(),
         sourceDirectory.getAbsolutePath());

    // (4-5) add content entries for all archive
    // files in the 'spring/libs' folder
    File libsDir = new File(System.getProperty("user.dir"), 
      "spring/libs");
    
    for (File externalJar : libsDir.listFiles()) {
    projectDescription
      .addResourceContent(externalJar.getAbsolutePath());
    }

    // (4-6) finally we have to save the project description
    projectDescription.save();
  }
}
                
            </codeblock>
        </result>
    </taskbody>
</task>
